// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client/deno" 
  previewFeatures = ["deno"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  phoneNo  String
  password String
  address  String
  userRole String  @default("ROLE_USER")
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt 

  orders    Order[]
}

model Restaurant {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  ownerName      String
  ownerPhoneNo   String
  address        String
  restaurantType String
  orderCapacityPerDay  Int
  openTime       String
  closingTime    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?
  items          AvailableItems[]
  orders    Order[]
}

model AvailableItems {
  id            Int        @id @default(autoincrement())
  name          String
  description   String
  price          Float
  restaurantId  Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Order {
  id           Int      @id @default(autoincrement())
  userId       Int
  restaurantId Int
  foodItems    Json
  address      String
  totalAmount  Float
  orderStatus  String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt

  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("orders")
}

